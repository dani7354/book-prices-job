// <auto-generated />
using System;
using BookPricesJob.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookPricesJob.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241020102604_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BookPricesJob.Data.Entity.Job", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("BookPricesJob.Data.Entity.JobRun", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobRun");
                });

            modelBuilder.Entity("BookPricesJob.Data.Entity.JobRunArgument", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("JobRunId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("JobRunId");

                    b.ToTable("JobRunArgument");
                });

            modelBuilder.Entity("BookPricesJob.Data.Entity.JobRunArgumentValue", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("JobRunArgumentId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("JobRunArgumentId");

                    b.ToTable("JobRunArgumentValue");
                });

            modelBuilder.Entity("BookPricesJob.Data.Entity.JobRun", b =>
                {
                    b.HasOne("BookPricesJob.Data.Entity.Job", "Job")
                        .WithMany("JobRuns")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("BookPricesJob.Data.Entity.JobRunArgument", b =>
                {
                    b.HasOne("BookPricesJob.Data.Entity.JobRun", "JobRun")
                        .WithMany("Arguments")
                        .HasForeignKey("JobRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobRun");
                });

            modelBuilder.Entity("BookPricesJob.Data.Entity.JobRunArgumentValue", b =>
                {
                    b.HasOne("BookPricesJob.Data.Entity.JobRunArgument", "JobRunArgument")
                        .WithMany("Values")
                        .HasForeignKey("JobRunArgumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobRunArgument");
                });

            modelBuilder.Entity("BookPricesJob.Data.Entity.Job", b =>
                {
                    b.Navigation("JobRuns");
                });

            modelBuilder.Entity("BookPricesJob.Data.Entity.JobRun", b =>
                {
                    b.Navigation("Arguments");
                });

            modelBuilder.Entity("BookPricesJob.Data.Entity.JobRunArgument", b =>
                {
                    b.Navigation("Values");
                });
#pragma warning restore 612, 618
        }
    }
}
